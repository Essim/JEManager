import static org.junit.Assert.assertEquals;

import org.junit.Before;
import org.junit.Test;

import biz.UserDto;
import exceptions.InvalidInformationException;
import exceptions.UserNameAlreadyPickedException;
import mockObjects.MockUser;
import ucc.UserUccImpl;

public class UserUccImplTest {

  private MockDalServices mockDal;
  private MockUnitOfWork mockUnitOfWork1, mockUnitOfWork2;
  private UserUccImpl ucc1, ucc2, ucc3;
  private MockUserDao mockUserDao1, mockUserDao2, mockUserDao3;
  private UserDto mockUserDto;

  /**
   * @throws Exception If one is thrown during initialisation.
   */
  @Before
  public void setUp() throws Exception {
    mockDal = new MockDalServices();
    // for test 1 and 3
    mockUserDto = new MockUser();
    mockUnitOfWork1 = new MockUnitOfWork(false, false);
    mockUserDao1 = new MockUserDao(false, true, false);
    ucc1 = new UserUccImpl(mockUserDao1, mockDal, mockUnitOfWork1);
    // for test 2
    mockUnitOfWork2 = new MockUnitOfWork(true, false);
    mockUserDao2 = new MockUserDao(false, false, true);
    ucc2 = new UserUccImpl(mockUserDao2, mockDal, mockUnitOfWork2);
    // for test 4
    mockUserDao3 = new MockUserDao(true, false, false);
    ucc3 = new UserUccImpl(mockUserDao3, mockDal, mockUnitOfWork1);
  }

  /**
   * Checking that login calls the getUserByPseudo method on the company dao.
   */
  @Test
  public void testLogin() {
    ucc1.login(mockUserDto);
    assertEquals("getUserByPseudo should have been called on the dao", true,
        mockUserDao1.validate());
  }

  /**
   * Checking that register calls the addInsert method on the unit of work.
   * 
   * @throws InvalidInformationException if throw by the method under test
   * @throws UserNameAlreadyPickedException if throw by the method under test
   */
  @Test
  public void testRegister() throws UserNameAlreadyPickedException, InvalidInformationException {
    ucc2.register(mockUserDto);
    assertEquals("addInsert should have been called on the unit of work", true,
        mockUnitOfWork2.validate());
  }

  /**
   * Checking that getUserByUsername calls the getUserByPseudo method on the company dao.
   */
  @Test
  public void testGetUserByUsername() {
    ucc1.getUserByUsername("");
    assertEquals("getUserByPseudo should have been called on the dao", true,
        mockUserDao1.validate());
  }

  /**
   * Checking that getUserById calls the getUserById method on the company dao.
   */
  @Test
  public void testGetUserById() {
    ucc3.getUserById(0);
    assertEquals("getUserById should have been called on the dao", true, mockUserDao3.validate());
  }
}
