package ucc;

import java.util.List;
import java.util.stream.Collectors;

import biz.Event;
import biz.EventDto;
import biz.Participation;
import biz.ParticipationDto;
import exceptions.WrongStateException;
import persistence.UnitOfWork;
import persistence.dao.ParticipationDao;

public class ParticipationUccImpl implements ParticipationUcc {

  private ParticipationDao participationDao;
  private UnitOfWork unit;

  ParticipationUccImpl(ParticipationDao participationDao, UnitOfWork unit) {
    this.participationDao = participationDao;
    this.unit = unit;
  }

  @Override
  public ParticipationDto addParticipation(ParticipationDto participation) {
    unit.startTransaction();
    Participation participationDto = (Participation) participation;
    unit.addInsert(participationDto);
    unit.commit();
    participationDto.setParticipationId(unit.getResult());
    if (participationDto.getParticipationId() == -1) {
      return null;
    }
    return participationDto;
  }

  @Override
  public List<ParticipationDto> getCurrentParticipations() {
    unit.startTransaction();
    List<ParticipationDto> list = participationDao.getCurrentParticipations().stream()
        .map(p -> (ParticipationDto) p).collect(Collectors.toList());
    unit.commit();
    return list;
  }

  @Override
  public int countInvitedParticipation(EventDto event) {
    unit.startTransaction();
    int integer = participationDao.countParticipations((Event) event, INVITED);
    unit.commit();
    return integer;
  }

  @Override
  public int countConfirmedParticipation(EventDto event) {
    unit.startTransaction();
    int integer = participationDao.countParticipations((Event) event, CONFIRMED);
    unit.commit();
    return integer;
  }

  @Override
  public int countRefusedParticipation(EventDto event) {
    unit.startTransaction();
    int integer = participationDao.countParticipations((Event) event, REFUSED);
    unit.commit();
    return integer;
  }

  @Override
  public int countCancelledParticipation(EventDto event) {
    unit.startTransaction();
    int integer = participationDao.countParticipations((Event) event, CANCELLED);
    unit.commit();
    return integer;
  }

  @Override
  public int countInvoicedParticipation(EventDto event) {
    unit.startTransaction();
    int integer = participationDao.countParticipations((Event) event, INVOICED);
    unit.commit();
    return integer;
  }

  @Override
  public int countPaidParticipation(EventDto event) {
    unit.startTransaction();
    int integer = participationDao.countParticipations((Event) event, PAID);
    unit.commit();
    return integer;
  }

  @Override
  public int editStates(List<ParticipationDto> participations) throws WrongStateException {
    System.out.println("transaction");
    unit.startTransaction();
    for (ParticipationDto participationDto : participations) {
      Participation participation = (Participation) participationDto;
      participation.checkState();
      System.out.println("add state");
      unit.addUpdate(participationDto);
    }
    System.out.println("committing");
    unit.commit();
    return 0;
  }

  @Override
  public List<ParticipationDto> getAllPartcipationFor(EventDto event) {
    unit.startTransaction();
    List<ParticipationDto> list = participationDao.getParticipationForState((Event) event, ALL)
        .stream().map(p -> (ParticipationDto) p).collect(Collectors.toList());
    unit.commit();
    return list;
  }

  @Override
  public List<ParticipationDto> getInvitedParticipationsFor(EventDto event) {
    unit.startTransaction();
    List<ParticipationDto> list = participationDao.getParticipationForState((Event) event, INVITED)
        .stream().map(p -> (ParticipationDto) p).collect(Collectors.toList());
    unit.commit();
    return list;
  }

  @Override
  public List<ParticipationDto> getConfirmedParticipationsFor(EventDto event) {
    unit.startTransaction();
    List<ParticipationDto> list =
        participationDao.getParticipationForState((Event) event, CONFIRMED).stream()
            .map(p -> (ParticipationDto) p).collect(Collectors.toList());
    unit.commit();
    return list;
  }

  @Override
  public List<ParticipationDto> getRefusedParticipationsFor(EventDto event) {
    unit.startTransaction();
    List<ParticipationDto> list = participationDao.getParticipationForState((Event) event, REFUSED)
        .stream().map(p -> (ParticipationDto) p).collect(Collectors.toList());
    unit.commit();
    return list;
  }

  @Override
  public List<ParticipationDto> getCancelledParticipationsFor(EventDto event) {
    unit.startTransaction();
    List<ParticipationDto> list =
        participationDao.getParticipationForState((Event) event, CANCELLED).stream()
            .map(p -> (ParticipationDto) p).collect(Collectors.toList());
    unit.commit();
    return list;
  }

  @Override
  public List<ParticipationDto> getInvoicedParticipationsFor(EventDto event) {
    unit.startTransaction();
    List<ParticipationDto> list = participationDao.getParticipationForState((Event) event, INVOICED)
        .stream().map(p -> (ParticipationDto) p).collect(Collectors.toList());
    unit.commit();
    return list;
  }

  @Override
  public List<ParticipationDto> getPaidParticipationsFor(EventDto event) {
    unit.startTransaction();
    List<ParticipationDto> list = participationDao.getParticipationForState((Event) event, PAID)
        .stream().map(p -> (ParticipationDto) p).collect(Collectors.toList());
    unit.commit();
    return list;
  }



}
